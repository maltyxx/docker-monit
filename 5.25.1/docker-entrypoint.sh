#!/bin/bash

########### Check that Auth variables are defined
if [ -z "$MONIT_USERNAME" ]; then
    echo "You must define MONIT_USERNAME"
    exit 1
fi

if [ -z "$MONIT_PASSWORD" ]; then
    echo "You must define MONIT_PASSWORD"
    exit 1
fi

########### Login Configuration
cat << EOF > /usr/local/etc/monitrc/monit.d/setting.cfg
# Generated by docker-entrypoint.sh
set httpd port 2812 and
    use address 0.0.0.0
    allow ${MONIT_USERNAME:-admin}:${MONIT_PASSWORD} readonly
EOF

########### Add system
echo "# Generated by docker-entrypoint.sh" > /usr/local/etc/monitrc/monit.d/system.cfg

cat << EOF >> /usr/local/etc/monitrc/monit.d/system.cfg
check system cpu
    if cpu usage (user) > 80% for 2 cycles then alert
    if cpu usage (system) > 20% for 2 cycles then alert
    if cpu usage (wait) > 80% for 2 cycles then alert
EOF

cat << EOF >> /usr/local/etc/monitrc/monit.d/system.cfg
#check system loadavg
#    if loadavg (1min) > 3 then alert
#    if loadavg (5min) > 2 then alert
#    if loadavg (15min) > 1 then alert
EOF

cat << EOF >> /usr/local/etc/monitrc/monit.d/system.cfg
check system memory
    if memory usage > 90% for 4 cycles then alert
EOF

cat << EOF >> /usr/local/etc/monitrc/monit.d/system.cfg
check system swap
    if swap usage > 20% for 4 cycles then alert
EOF

########### Add all filesystems mounted
if [ ! -z "$MONIT_VOLUME_EXCLUDED" ]; then
    MOUNTS=$(findmnt -n -lo target -t btrfs,ext4,nfs,xfs | egrep '^/host' | egrep -v '^/host/var/lib/docker/devicemapper' | grep -v -E '($MONIT_VOLUME_EXCLUDED)' || true)
else
    MOUNTS=$(findmnt -n -lo target -t btrfs,ext4,nfs,xfs | egrep '^/host' | egrep -v '^/host/var/lib/docker/devicemapper' || true)
fi
echo "# Generated by docker-entrypoint.sh" > /usr/local/etc/monitrc/monit.d/filesystem.cfg

for M in $MOUNTS; do
    NAME=$(basename $M)

    if [ $NAME = "/" ]; then
        NAME="rootfs"
    fi

cat << EOF >> /usr/local/etc/monitrc/monit.d/filesystem.cfg
check filesystem ${NAME} with path ${M}
  if space usage > 90% for 5 times within 15 cycles then alert
EOF
done

########### Add all interface network

if [ ! -z "$MONIT_NETWORK_EXCLUDED" ]; then
    INTERFACES=$(ifconfig | cut -c 1-8 | sort | uniq -u | grep -v -E '($MONIT_NETWORK_EXCLUDED)')
else
    INTERFACES=$(ifconfig | cut -c 1-8 | sort | uniq -u)
fi

echo "# Generated by docker-entrypoint.sh" > /usr/local/etc/monitrc/monit.d/network.cfg

for I in $INTERFACES; do
    NAME=$(basename $I)
cat << EOF >> /usr/local/etc/monitrc/monit.d/network.cfg
check network ${NAME} with interface ${I}
  if saturation > 90% then alert
EOF
done

########### Add docker

if [ -z "$MONIT_CONTAINER_LABEL" ]; then
    MONIT_CONTAINER_LABEL=io.rancher.container.name
fi

if [ ! -z "$MONIT_CONTAINER_EXCLUDED" ]; then
    CONTAINERS=$(docker ps --format "{{.Label \"$MONIT_CONTAINER_LABEL\"}}" | grep -v -E '($MONIT_CONTAINER_EXCLUDED)')
else
    CONTAINERS=$(docker ps --format "{{.Label \"$MONIT_CONTAINER_LABEL\"}}")
fi

echo "# Generated by docker-entrypoint.sh" > /usr/local/etc/monitrc/monit.d/docker.cfg

# On boucle dessus pour cr√©er les fichiers de checkservices par conteneur
for C in $CONTAINERS; do
cat << EOF >> /usr/local/etc/monitrc/monit.d/docker.cfg
check program ${C} with path "/usr/local/etc/monitrc/script.d/docker.sh ${C}"
   if status > 0 for 2 cycles then alert
EOF
done

# -----------------------------------------------
# Databases filesize verification
# Author   Romain GALLIEN <r.gallien@santiane.fr>
# category Script
# Version  20171121

# Get the list of the MyISAM and InnoDB files to check
if [ ! -z "$MONIT_DB_DATA_PATH" -a -d "$MONIT_DB_DATA_PATH" ]; then
      
    if [ ! -z "$MONIT_DB_INCLUDE_EXT" ]; then
        INCLUDE_EXT="$MONIT_DB_INCLUDE_EXT"
    else
        INCLUDE_EXT="MYD,ibd"
    fi

    if [ ! -z "$MONIT_DB_EXCLUDED_PATH" ]; then
        DB_FILES=$(ls -aRm $MONIT_DB_PATH.{$INCLUDE_EXT} | grep -v -E '($MONIT_DB_EXCLUDED_PATH)' | tr "," " ")
    else
        DB_FILES=$(ls -aRm $MONIT_DB_PATH.{$INCLUDE_EXT} | tr "," " ")
    fi

    # Create the databases.cfg file
    echo "# Generated by docker-entrypoint.sh" > /usr/local/etc/monitrc/monit.d/databases.cfg

    # Loop on the files
    for DB_FILE in $DB_FILES
    do
        # Set the filepath
        FILE_PATH=$DB_FILE

        # Set the filename
        FILE_NAME=$(basename "$FILE_PATH")

        # Get the current filesize
        FILE_SIZE=$(du -b $DB_FILE | cut -f1)

        # Get the sum of maximal allowed filesize (= FILE_SIZE = 10%)
        FILE_SIZE_MAX=$(($FILE_SIZE+($FILE_SIZE / $DB_FILE_PERCENT)))

    # Write the Monit rule
cat << EOF >> /usr/local/etc/monitrc/monit.d/databases.cfg
check file $FILE_NAME with path $FILE_PATH
   if size > $FILE_SIZE_MAX B then alert
EOF
done
fi

########### Add all script
if [ -d /docker-entrypoint.d ]; then
	for f in /docker-entrypoint.d/*; do
		[ -x "$f" ] && . "$f"
	done
	unset f
fi

echo "Running $@"
exec "$@"
