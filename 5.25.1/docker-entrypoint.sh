#!/bin/bash

# -------------------------------------
# CHECK THAT AUTH VARIABLES ARE DEFINED
# -------------------------------------
if [ -z "$MONIT_USERNAME" ]; then
    echo "You must define MONIT_USERNAME"
    exit 1
fi

if [ -z "$MONIT_PASSWORD" ]; then
    echo "You must define MONIT_PASSWORD"
    exit 1
fi

# -----------------------------------------------
# LOGIN CONFIGURATION
# Author Yoann Vanitou <yvanitou@gmail.com>
# Category Script
# Version  20171206
# -----------------------------------------------
cat << EOF > /usr/local/etc/monitrc/monit.d/setting.cfg
# Generated by docker-entrypoint.sh
set httpd
    port 2812
    use address localhost
    allow ${MONIT_USERNAME}:${MONIT_PASSWORD} readonly
EOF

# -----------------------------------------------
# SYSTEM CHECKS
# Author Yoann Vanitou <yvanitou@gmail.com>
# Category Script
# Version  20171206
# -----------------------------------------------
echo "# Generated by docker-entrypoint.sh" > /usr/local/etc/monitrc/monit.d/system.cfg

cat << EOF >> /usr/local/etc/monitrc/monit.d/system.cfg
check system cpu
    if cpu usage (user) > 80% for 2 cycles then alert
    if cpu usage (system) > 20% for 2 cycles then alert
    if cpu usage (wait) > 80% for 2 cycles then alert
EOF

cat << EOF >> /usr/local/etc/monitrc/monit.d/system.cfg
#check system loadavg
#    if loadavg (1min) > 3 then alert
#    if loadavg (5min) > 2 then alert
#    if loadavg (15min) > 1 then alert
EOF

cat << EOF >> /usr/local/etc/monitrc/monit.d/system.cfg
check system memory
    if memory usage > 90% for 4 cycles then alert
EOF

cat << EOF >> /usr/local/etc/monitrc/monit.d/system.cfg
check system swap
    if swap usage > 20% for 4 cycles then alert
EOF

# -----------------------------------------------
# MOUNTED SYSTEM VOLUMES
# Author Yoann Vanitou <yvanitou@gmail.com>
# Category Script
# Version  20171206
# -----------------------------------------------
echo "# Generated by docker-entrypoint.sh" > /usr/local/etc/monitrc/monit.d/filesystem.cfg

# Base command
CMD="findmnt -n -lo target -t btrfs,ext4,nfs,xfs | egrep '^/host' | egrep -v '^/host/var/lib/docker/devicemapper'"

# If we got any volume to exclude
if [ ! -z "$MONIT_VOLUME_EXCLUDED" ]; then
    # Replace "," with "|" for GREP command
    MONIT_VOLUME_EXCLUDED=$(echo "$MONIT_VOLUME_EXCLUDED" | tr ',' '|')

    # Let's concatenate both
    CMD="$CMD | grep -v -E '($MONIT_VOLUME_EXCLUDED)'"
fi

# Concatenate true return
CMD="$CMD || true"

# Eval and output in var
MOUNTS=$(eval "$CMD")

for M in $MOUNTS; do
    NAME=$(basename $M)

    if [ $NAME = "/" ]; then
        NAME="rootfs"
    fi

# Write the Monit rule
cat << EOF >> /usr/local/etc/monitrc/monit.d/filesystem.cfg
check filesystem ${NAME} with path ${M}
  if space usage > 90% for 5 times within 15 cycles then alert
EOF
done

# -----------------------------------------------
# NETWORK INTERFACE VERIFICATION
# Author   Romain GALLIEN <romaingallien.rg@gmail.com>
# Category Script
# Version  20171206
# -----------------------------------------------
echo "# Generated by docker-entrypoint.sh" > /usr/local/etc/monitrc/monit.d/network.cfg

# Base command
CMD="ifconfig | cut -c 1-8 | sort | uniq -u"

# If we got any env var with network to exclude
if [ ! -z "$MONIT_NETWORK_EXCLUDED" ]; then
    # Replace "," with "|" for GREP command
    MONIT_NETWORK_EXCLUDED=$(echo "$MONIT_NETWORK_EXCLUDED" | tr ',' '|')

    # Let's concatenate both
    CMD="$CMD | grep -v -E '($MONIT_NETWORK_EXCLUDED)'"
fi

# Eval and output in var
INTERFACES=$(eval "$CMD")

# For each interfaces, add an Network verification
for I in $INTERFACES; do
    NAME=$(basename $I)

# Write the Monit rule
cat << EOF >> /usr/local/etc/monitrc/monit.d/network.cfg
check network ${NAME} with interface ${I}
  if saturation > 90% then alert
EOF
done

# -----------------------------------------------
# DOCKER SERVICES VERIFICATION
# Author   Romain GALLIEN <romaingallien.rg@gmail.com>
# Category Script
# Version  20171206
# -----------------------------------------------
echo "# Generated by docker-entrypoint.sh" > /usr/local/etc/monitrc/monit.d/docker.cfg

# We define the docker format option
if [ -z "$MONIT_CONTAINER_LABEL" ]; then
    MONIT_CONTAINER_LABEL="io.rancher.container.name"
fi

# We defines the base command
CMD='docker ps --format "{{.Label \"$MONIT_CONTAINER_LABEL\"}}"'

# If we got any container to exclude
if [ ! -z "$MONIT_CONTAINER_EXCLUDED" ]; then
    # Replace "," with "|" for GREP command
    MONIT_CONTAINER_EXCLUDED=$(echo "$MONIT_CONTAINER_EXCLUDED" | tr ',' '|')

    # Let's concatenate both
    CMD="$CMD | grep -v -E '($MONIT_CONTAINER_EXCLUDED)'"
fi

# Eval and output in var
CONTAINERS=$(eval "$CMD")

# Write the Monit rule
for C in $CONTAINERS; do
cat << EOF >> /usr/local/etc/monitrc/monit.d/docker.cfg
check program ${C} with path "/usr/local/etc/monitrc/script.d/docker.sh ${C}"
   if status > 0 for 2 cycles then alert
EOF
done

# -----------------------------------------------
# DATABASES FILESIZE VERIFICATION
# Author   Romain GALLIEN <romaingallien.rg@gmail.com>
# Category Script
# Version  20171206
# -----------------------------------------------
echo "# Generated by docker-entrypoint.sh" > /usr/local/etc/monitrc/monit.d/databases.cfg

# Get the list of the MyISAM and InnoDB files to check
if [ ! -z "$MONIT_DB_DATA_PATH" -a -d "$MONIT_DB_DATA_PATH" ]; then

    # We defines the extensions to check by default
    if [ ! -z "$MONIT_DB_INCLUDE_EXT" ]; then
        INCLUDE_EXT="$MONIT_DB_INCLUDE_EXT"
    else
        INCLUDE_EXT="MYD,ibd"
    fi

    # We defines the base command
    CMD="ls -aRm $MONIT_DB_PATH.{$INCLUDE_EXT}"

    # If we got any databse file to exclude
    if [ ! -z "$MONIT_DB_EXCLUDED_PATH" ]; then
        # Replace "," with "|" for GREP command
        MONIT_DB_EXCLUDED_PATH=$(echo "$MONIT_DB_EXCLUDED_PATH" | tr ',' '|')

        # Let's concatenate both
        CMD="$CMD | grep -v -E '($MONIT_DB_EXCLUDED_PATH)'"
    fi

    # Eval and output in var
    DB_FILES=$(eval "$CMD")

    # Loop on the files
    for DB_FILE in $DB_FILES; do
        # Set the filepath
        FILE_PATH=$DB_FILE

        # Set the filename
        FILE_NAME=$(basename "$FILE_PATH")

        # Get the current filesize
        FILE_SIZE=$(du -b $DB_FILE | cut -f1)

        # Get the sum of maximal allowed filesize (= FILE_SIZE = 10%)
        FILE_SIZE_MAX=$(($FILE_SIZE+($FILE_SIZE / $DB_FILE_PERCENT)))

# Write the Monit rule
cat << EOF >> /usr/local/etc/monitrc/monit.d/databases.cfg
check file $FILE_NAME with path $FILE_PATH
   if size > $FILE_SIZE_MAX B then alert
EOF
done
fi


# --------------
# ADD ALL SCRIPT
# --------------
if [ -d /docker-entrypoint.d ]; then
    for f in /docker-entrypoint.d/*; do
        [ -x "$f" ] && . "$f"
    done
    unset f
fi

echo "Running $@"
exec "$@"
